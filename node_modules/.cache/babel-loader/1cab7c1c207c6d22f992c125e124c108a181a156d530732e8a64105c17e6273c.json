{"ast":null,"code":"import './App.css';\nimport Axios from 'axios';\nimport { useState, useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport apiBasePath from './globalVars';\nimport { ReactSession } from 'react-client-session';\nimport ColorThief from 'colorthief';\nfunction Main() {\n  console.log('here');\n  /*const [sort, setSort] = useState(\r\n    {\r\n      field: \"addeddate\",\r\n      direction: \"desc\"\r\n    }\r\n  )\r\n  const handleSortChange = e => {\r\n    setSort(\r\n      {\r\n        ...sort, [e.target.name]: e.target.value\r\n      }\r\n    )\r\n  }\r\n  const personid = -1\r\n  const [albumsList, setAlbumsList] = useState([])\r\n  const getAlbums = (sortField, sortDirection) => {\r\n    Axios.get(apiBasePath + '/getalbums/' + personid + \"/\" + sortField + \"/\" + sortDirection)\r\n      .then(\r\n        res => {\r\n          let albums = []\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            albums[i] = {\r\n              index: i,\r\n              album: res.data[i]\r\n            }\r\n          }\r\n          setAlbumsList(albums)\r\n        }\r\n      )\r\n  }\r\n  useEffect(\r\n    () => getAlbums(sort.field, sort.direction),\r\n    [sort]\r\n  )\r\n  const Album = ({ album, index, ratings, handleChange, handleReset }) => {\r\n    const inputRef = useRef();\r\n    const coverRef = useRef();\r\n    const blockRef = useRef();\r\n    const [color0, setColor0] = useState();\r\n    const [color1, setColor1] = useState();\r\n    const [color2, setColor2] = useState();\r\n    const [shadowState, setShadowState] = useState(\"\");\r\n    const setDisabledInputs = (addedbypersonid) => {\r\n      if (personid === -1 && addedbypersonid !== -1) {\r\n        return true\r\n      }\r\n      else {\r\n        return false\r\n      }\r\n    }\r\n    const deletealbum = (id) => {\r\n      var confirm = window.confirm('Delete album?')\r\n      confirm ? \r\n        Axios.delete(apiBasePath + '/deletealbum/' + id)\r\n          .then(\r\n            () => {\r\n              getAlbums(sort.field, sort.direction)\r\n            }\r\n          )\r\n      : void(0)\r\n    }\r\n    const handleSubmit = (event, albumid, rating) => {\r\n      event.preventDefault()\r\n      if (rating < 0 || rating > 10) {\r\n        window.alert('Ratings must be between 0 and 10')\r\n      }\r\n      else if (rating === \"\") {\r\n        void(0)\r\n      }\r\n      else {\r\n        Axios.put(apiBasePath + '/updatescore/' + personid + '/' + albumid + '/' + rating)\r\n          .then(\r\n            () => {\r\n              getAlbums(sort.field, sort.direction)\r\n            }\r\n          )\r\n      }\r\n    }\r\n    const getColors = (coverRef) => {\r\n      const img = coverRef.current\r\n      const colorThief = new ColorThief()\r\n      const result = colorThief.getPalette(img, 3)\r\n      setColor0('rgb('+result[0][0]+','+result[0][1]+','+result[0][2]+')')\r\n      setColor1('rgb('+result[1][0]+','+result[1][1]+','+result[1][2]+')')\r\n      setColor2('rgb('+result[2][0]+','+result[2][1]+','+result[2][2]+')')\r\n    }\r\n    const onHover = blockRef => {\r\n      setShadowState(`5px 5px 5px ${color2}`)\r\n    }\r\n    const onLeave = blockRef => {\r\n      setShadowState(\"\")\r\n    }\r\n    return (\r\n      <div\r\n        class=\"block\"\r\n        ref={blockRef}\r\n        key={album.index}\r\n        onMouseEnter={() => onHover(blockRef)}\r\n        onMouseLeave={() => onLeave(blockRef)}\r\n        style={\r\n          {\r\n            margin: \"2%\",\r\n            backgroundColor: color0,\r\n            boxShadow: shadowState,\r\n            transition: \"0.5s\"\r\n          }\r\n        }\r\n      >\r\n        <div class=\"columns is-vcentered\">\r\n          <div class=\"column is-3 has-text-centered\">\r\n            <img\r\n              src=\"/covers/Jeff_Buckley_grace.jpg\"\r\n              alt=\"cover\"\r\n              ref={coverRef}\r\n              onLoad={() => getColors(coverRef)}\r\n            ></img>\r\n          </div>\r\n          <div class=\"column is-2\" style={{color: color1}}>\r\n            <strong style={{color: color2}}>{album.album.artist}</strong><br />\r\n            <i style={{color: color2}}>{album.album.title}</i><br />\r\n            Release Date: {(album.album.releasedate == null) ? null : album.album.releasedate.substring(0, 10)}<br />\r\n            {album.album.genre}<br />\r\n            {album.album.recordlabel}<br />\r\n            Added by: {album.album.addedbypersonname}<br />\r\n            Added date: {(album.album.addeddate == null) ? null : album.album.addeddate.substring(0, 10)}<br />\r\n          </div>\r\n          <div class=\"column is-2\">\r\n            <form class=\"form\" name='form'>\r\n              <div class=\"field\">\r\n                <label class=\"label\" style={{color: color1}}>Your rating:</label>\r\n                <div class=\"control\">\r\n                  <input\r\n                    class=\"input\"\r\n                    name='scoreRange'\r\n                    type=\"range\"\r\n                    min=\"0\"\r\n                    max=\"10\"\r\n                    step=\"0.1\"\r\n                    defaultValue={album.album.rating}\r\n                    value={ratings[index]}\r\n                    onChange={(e) => handleChange(index, e.target.value)}\r\n                    disabled={setDisabledInputs(album.album.addedbypersonid)}\r\n                    ref={inputRef}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div class=\"field is-horizontal\">\r\n                <div class=\"field-body\">\r\n                  <div class=\"field is-narrow\">\r\n                    <div class=\"control\">\r\n                      <input\r\n                        class=\"input\"\r\n                        name='scoreNum'\r\n                        type=\"number\"\r\n                        min=\"0\"\r\n                        max=\"10\"\r\n                        step=\"0.1\"\r\n                        placeholder={album.album.rating}\r\n                        value={album.album.rating === ratings[index] ? null : ratings[index]}\r\n                        onChange={(e) => handleChange(index, e.target.value)}\r\n                        disabled={setDisabledInputs(album.album.addedbypersonid)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"field\">\r\n                    <div class=\"control\">\r\n                      <input\r\n                        class=\"input\"\r\n                        type=\"reset\"\r\n                        onClick={() => handleReset(index, inputRef)}\r\n                        disabled={setDisabledInputs(album.album.addedbypersonid)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"field\">\r\n                    <div class=\"control\">\r\n                      <button\r\n                        type=\"button\"\r\n                        class=\"button is-dark\"\r\n                        disabled={setDisabledInputs(album.album.addedbypersonid)}\r\n                        onClick={e => handleSubmit(e, album.album.albumid, ratings[index])}\r\n                        style={{backgroundColor: color1, color: color0}}\r\n                      >\r\n                        Submit\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n          <div class=\"column is-2\">\r\n            <article class=\"message\">\r\n              <div class=\"message-header\" style={{backgroundColor: color1, color: color0}}>\r\n                <p>Average score</p>\r\n              </div>\r\n              <div class=\"message-body\">\r\n                {album.album.averagescore}\r\n              </div>\r\n            </article>\r\n          </div>\r\n          <div class=\"column is-3\">\r\n            <div class=\"block\">\r\n              <button\r\n                class=\"button is-danger\"\r\n                onClick={() => { deletealbum(album.album.albumid) }}\r\n                disabled={setDisabledInputs(album.album.addedbypersonid)}\r\n              >\r\n                Delete Album\r\n              </button>\r\n              <Link to={`editalbum/${album.album.albumid}`}>\r\n                <button\r\n                  class=\"button is-green\"\r\n                  disabled={setDisabledInputs(album.album.addedbypersonid)}\r\n                >\r\n                  Edit Album\r\n                </button>\r\n              </Link>\r\n            </div>\r\n            <div class=\"block\">\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n    const AlbumList = ({ albums }) => {\r\n    const [ratings, setRatings] = useState(albums.map(album => album.album.rating))\r\n    const handleChange = (index, newRating) => {\r\n      const newRatings = [...ratings]\r\n      newRatings[index] = newRating\r\n      setRatings(newRatings)\r\n    }\r\n    const handleReset = (index, inputRef) => {\r\n      setRatings(\r\n        ratings => {\r\n          const newRatings = [...ratings]\r\n          newRatings[index] = albums[index].album.rating\r\n          inputRef.current.value = null\r\n          return newRatings\r\n        }\r\n      )\r\n    }\r\n    return (\r\n      <>\r\n        {\r\n          albums.map(\r\n            (album, index) => (\r\n              <Album\r\n                key={album.index}\r\n                album={album}\r\n                index={index}\r\n                ratings={ratings}\r\n                handleChange={handleChange}\r\n                handleReset={handleReset}\r\n              />\r\n            )\r\n          )\r\n        }\r\n      </>\r\n    )\r\n  }\r\n  return (\r\n    <>\r\n      <section className=\"section has-background-link-dark\">\r\n        <div class=\"columns is-centered\">\r\n          <div class=\"column\">\r\n            <Link to=\"login\">\r\n              <button class=\"button is-white\">Log out</button>\r\n            </Link>\r\n          </div>\r\n          <div class=\"column is-half has-text-centered\"><h1 class=\"title is-1 has-text-white\">Albums of the Year</h1></div>\r\n          <div class=\"column has-text-right\">\r\n            <Link to='addalbum'>\r\n              <button class=\"button is-white\">Add album</button>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <div class=\"box\">\r\n        <form class=\"form\">\r\n          <div class=\"field is-horizontal\">\r\n            <div class=\"field-label is-normal\">\r\n              <label class=\"label\">Sort</label>\r\n            </div>\r\n            <div class=\"field-body\">\r\n              <div class=\"field is-grouped\">\r\n                <div class=\"control\">\r\n                  <div class=\"select\">\r\n                    <select name=\"field\" value={sort.field} onChange={handleSortChange}>\r\n                      <option value=\"addeddate\">Added Date</option>\r\n                      <option value=\"releasedate\">Release Date</option>\r\n                      <option value=\"artist\">Artist</option>\r\n                      <option value=\"title\">Title</option>\r\n                      <option value=\"averagescore\">Average Rating</option>\r\n                      <option value=\"rating\">Your Rating</option> \r\n                    </select>\r\n                  </div>\r\n                </div>\r\n                <div class=\"control\">\r\n                  <div class=\"select\">\r\n                    <select name=\"direction\" value={sort.direction} onChange={handleSortChange}>\r\n                      <option value=\"asc\">Ascending</option>\r\n                      <option value=\"desc\">Descending</option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <AlbumList albums={albumsList}/>\r\n    </>\r\n  )\r\n  */\n}\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["Axios","useState","useEffect","useRef","Link","apiBasePath","ReactSession","ColorThief","Main","console","log"],"sources":["C:/Users/alecv/Album Reviews Site/client/src/Main.js"],"sourcesContent":["import './App.css';\r\nimport Axios from 'axios';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport apiBasePath from './globalVars';\r\nimport { ReactSession } from 'react-client-session';\r\nimport ColorThief from 'colorthief'\r\n\r\nfunction Main() {\r\n  console.log('here')\r\n  /*const [sort, setSort] = useState(\r\n    {\r\n      field: \"addeddate\",\r\n      direction: \"desc\"\r\n    }\r\n  )\r\n  const handleSortChange = e => {\r\n    setSort(\r\n      {\r\n        ...sort, [e.target.name]: e.target.value\r\n      }\r\n    )\r\n  }\r\n  const personid = -1\r\n  const [albumsList, setAlbumsList] = useState([])\r\n  const getAlbums = (sortField, sortDirection) => {\r\n    Axios.get(apiBasePath + '/getalbums/' + personid + \"/\" + sortField + \"/\" + sortDirection)\r\n      .then(\r\n        res => {\r\n          let albums = []\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            albums[i] = {\r\n              index: i,\r\n              album: res.data[i]\r\n            }\r\n          }\r\n          setAlbumsList(albums)\r\n        }\r\n      )\r\n  }\r\n  useEffect(\r\n    () => getAlbums(sort.field, sort.direction),\r\n    [sort]\r\n  )\r\n  const Album = ({ album, index, ratings, handleChange, handleReset }) => {\r\n    const inputRef = useRef();\r\n    const coverRef = useRef();\r\n    const blockRef = useRef();\r\n    const [color0, setColor0] = useState();\r\n    const [color1, setColor1] = useState();\r\n    const [color2, setColor2] = useState();\r\n    const [shadowState, setShadowState] = useState(\"\");\r\n    const setDisabledInputs = (addedbypersonid) => {\r\n      if (personid === -1 && addedbypersonid !== -1) {\r\n        return true\r\n      }\r\n      else {\r\n        return false\r\n      }\r\n    }\r\n    const deletealbum = (id) => {\r\n      var confirm = window.confirm('Delete album?')\r\n      confirm ? \r\n        Axios.delete(apiBasePath + '/deletealbum/' + id)\r\n          .then(\r\n            () => {\r\n              getAlbums(sort.field, sort.direction)\r\n            }\r\n          )\r\n      : void(0)\r\n    }\r\n    const handleSubmit = (event, albumid, rating) => {\r\n      event.preventDefault()\r\n      if (rating < 0 || rating > 10) {\r\n        window.alert('Ratings must be between 0 and 10')\r\n      }\r\n      else if (rating === \"\") {\r\n        void(0)\r\n      }\r\n      else {\r\n        Axios.put(apiBasePath + '/updatescore/' + personid + '/' + albumid + '/' + rating)\r\n          .then(\r\n            () => {\r\n              getAlbums(sort.field, sort.direction)\r\n            }\r\n          )\r\n      }\r\n    }\r\n    const getColors = (coverRef) => {\r\n      const img = coverRef.current\r\n      const colorThief = new ColorThief()\r\n      const result = colorThief.getPalette(img, 3)\r\n      setColor0('rgb('+result[0][0]+','+result[0][1]+','+result[0][2]+')')\r\n      setColor1('rgb('+result[1][0]+','+result[1][1]+','+result[1][2]+')')\r\n      setColor2('rgb('+result[2][0]+','+result[2][1]+','+result[2][2]+')')\r\n    }\r\n    const onHover = blockRef => {\r\n      setShadowState(`5px 5px 5px ${color2}`)\r\n    }\r\n    const onLeave = blockRef => {\r\n      setShadowState(\"\")\r\n    }\r\n    return (\r\n      <div\r\n        class=\"block\"\r\n        ref={blockRef}\r\n        key={album.index}\r\n        onMouseEnter={() => onHover(blockRef)}\r\n        onMouseLeave={() => onLeave(blockRef)}\r\n        style={\r\n          {\r\n            margin: \"2%\",\r\n            backgroundColor: color0,\r\n            boxShadow: shadowState,\r\n            transition: \"0.5s\"\r\n          }\r\n        }\r\n      >\r\n        <div class=\"columns is-vcentered\">\r\n          <div class=\"column is-3 has-text-centered\">\r\n            <img\r\n              src=\"/covers/Jeff_Buckley_grace.jpg\"\r\n              alt=\"cover\"\r\n              ref={coverRef}\r\n              onLoad={() => getColors(coverRef)}\r\n            ></img>\r\n          </div>\r\n          <div class=\"column is-2\" style={{color: color1}}>\r\n            <strong style={{color: color2}}>{album.album.artist}</strong><br />\r\n            <i style={{color: color2}}>{album.album.title}</i><br />\r\n            Release Date: {(album.album.releasedate == null) ? null : album.album.releasedate.substring(0, 10)}<br />\r\n            {album.album.genre}<br />\r\n            {album.album.recordlabel}<br />\r\n            Added by: {album.album.addedbypersonname}<br />\r\n            Added date: {(album.album.addeddate == null) ? null : album.album.addeddate.substring(0, 10)}<br />\r\n          </div>\r\n          <div class=\"column is-2\">\r\n            <form class=\"form\" name='form'>\r\n              <div class=\"field\">\r\n                <label class=\"label\" style={{color: color1}}>Your rating:</label>\r\n                <div class=\"control\">\r\n                  <input\r\n                    class=\"input\"\r\n                    name='scoreRange'\r\n                    type=\"range\"\r\n                    min=\"0\"\r\n                    max=\"10\"\r\n                    step=\"0.1\"\r\n                    defaultValue={album.album.rating}\r\n                    value={ratings[index]}\r\n                    onChange={(e) => handleChange(index, e.target.value)}\r\n                    disabled={setDisabledInputs(album.album.addedbypersonid)}\r\n                    ref={inputRef}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div class=\"field is-horizontal\">\r\n                <div class=\"field-body\">\r\n                  <div class=\"field is-narrow\">\r\n                    <div class=\"control\">\r\n                      <input\r\n                        class=\"input\"\r\n                        name='scoreNum'\r\n                        type=\"number\"\r\n                        min=\"0\"\r\n                        max=\"10\"\r\n                        step=\"0.1\"\r\n                        placeholder={album.album.rating}\r\n                        value={album.album.rating === ratings[index] ? null : ratings[index]}\r\n                        onChange={(e) => handleChange(index, e.target.value)}\r\n                        disabled={setDisabledInputs(album.album.addedbypersonid)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"field\">\r\n                    <div class=\"control\">\r\n                      <input\r\n                        class=\"input\"\r\n                        type=\"reset\"\r\n                        onClick={() => handleReset(index, inputRef)}\r\n                        disabled={setDisabledInputs(album.album.addedbypersonid)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"field\">\r\n                    <div class=\"control\">\r\n                      <button\r\n                        type=\"button\"\r\n                        class=\"button is-dark\"\r\n                        disabled={setDisabledInputs(album.album.addedbypersonid)}\r\n                        onClick={e => handleSubmit(e, album.album.albumid, ratings[index])}\r\n                        style={{backgroundColor: color1, color: color0}}\r\n                      >\r\n                        Submit\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n          <div class=\"column is-2\">\r\n            <article class=\"message\">\r\n              <div class=\"message-header\" style={{backgroundColor: color1, color: color0}}>\r\n                <p>Average score</p>\r\n              </div>\r\n              <div class=\"message-body\">\r\n                {album.album.averagescore}\r\n              </div>\r\n            </article>\r\n          </div>\r\n          <div class=\"column is-3\">\r\n            <div class=\"block\">\r\n              <button\r\n                class=\"button is-danger\"\r\n                onClick={() => { deletealbum(album.album.albumid) }}\r\n                disabled={setDisabledInputs(album.album.addedbypersonid)}\r\n              >\r\n                Delete Album\r\n              </button>\r\n              <Link to={`editalbum/${album.album.albumid}`}>\r\n                <button\r\n                  class=\"button is-green\"\r\n                  disabled={setDisabledInputs(album.album.addedbypersonid)}\r\n                >\r\n                  Edit Album\r\n                </button>\r\n              </Link>\r\n            </div>\r\n            <div class=\"block\">\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const AlbumList = ({ albums }) => {\r\n    const [ratings, setRatings] = useState(albums.map(album => album.album.rating))\r\n    const handleChange = (index, newRating) => {\r\n      const newRatings = [...ratings]\r\n      newRatings[index] = newRating\r\n      setRatings(newRatings)\r\n    }\r\n    const handleReset = (index, inputRef) => {\r\n      setRatings(\r\n        ratings => {\r\n          const newRatings = [...ratings]\r\n          newRatings[index] = albums[index].album.rating\r\n          inputRef.current.value = null\r\n          return newRatings\r\n        }\r\n      )\r\n    }\r\n    return (\r\n      <>\r\n        {\r\n          albums.map(\r\n            (album, index) => (\r\n              <Album\r\n                key={album.index}\r\n                album={album}\r\n                index={index}\r\n                ratings={ratings}\r\n                handleChange={handleChange}\r\n                handleReset={handleReset}\r\n              />\r\n            )\r\n          )\r\n        }\r\n      </>\r\n    )\r\n  }\r\n  return (\r\n    <>\r\n      <section className=\"section has-background-link-dark\">\r\n        <div class=\"columns is-centered\">\r\n          <div class=\"column\">\r\n            <Link to=\"login\">\r\n              <button class=\"button is-white\">Log out</button>\r\n            </Link>\r\n          </div>\r\n          <div class=\"column is-half has-text-centered\"><h1 class=\"title is-1 has-text-white\">Albums of the Year</h1></div>\r\n          <div class=\"column has-text-right\">\r\n            <Link to='addalbum'>\r\n              <button class=\"button is-white\">Add album</button>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <div class=\"box\">\r\n        <form class=\"form\">\r\n          <div class=\"field is-horizontal\">\r\n            <div class=\"field-label is-normal\">\r\n              <label class=\"label\">Sort</label>\r\n            </div>\r\n            <div class=\"field-body\">\r\n              <div class=\"field is-grouped\">\r\n                <div class=\"control\">\r\n                  <div class=\"select\">\r\n                    <select name=\"field\" value={sort.field} onChange={handleSortChange}>\r\n                      <option value=\"addeddate\">Added Date</option>\r\n                      <option value=\"releasedate\">Release Date</option>\r\n                      <option value=\"artist\">Artist</option>\r\n                      <option value=\"title\">Title</option>\r\n                      <option value=\"averagescore\">Average Rating</option>\r\n                      <option value=\"rating\">Your Rating</option> \r\n                    </select>\r\n                  </div>\r\n                </div>\r\n                <div class=\"control\">\r\n                  <div class=\"select\">\r\n                    <select name=\"direction\" value={sort.direction} onChange={handleSortChange}>\r\n                      <option value=\"asc\">Ascending</option>\r\n                      <option value=\"desc\">Descending</option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <AlbumList albums={albumsList}/>\r\n    </>\r\n  )\r\n  */\r\n}\r\n\r\nexport default Main;"],"mappings":"AAAA,OAAO,WAAW;AAClB,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACnD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,WAAW,MAAM,cAAc;AACtC,SAASC,YAAY,QAAQ,sBAAsB;AACnD,OAAOC,UAAU,MAAM,YAAY;AAEnC,SAASC,IAAI,GAAG;EACdC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;EACniUb,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}